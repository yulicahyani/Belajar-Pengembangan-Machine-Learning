# -*- coding: utf-8 -*-
"""Submission2_new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wnHnqHajYHE6H81IoMZinaD2ocUR2A7F
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import math
from keras.layers import Dense, LSTM
from google_drive_downloader import GoogleDriveDownloader as gdd

"""Drive link : https://drive.google.com/file/d/1W7DVHYgEs_uFIIqmnsPHnqWOspBVXtuW/view?usp=sharing"""

gdd.download_file_from_google_drive(file_id='1W7DVHYgEs_uFIIqmnsPHnqWOspBVXtuW',
                                    dest_path='content/DailyDelhiClimate.zip',
                                    unzip=True)

data_train = pd.read_csv("/content/content/DailyDelhiClimate/DailyDelhiClimateTrain.csv")
data_train.head()

data_test = pd.read_csv("/content/content/DailyDelhiClimate/DailyDelhiClimateTest.csv")
data_test.head()

data_train['date'] = pd.to_datetime(data_train['date'])
data_test['date'] = pd.to_datetime(data_test['date'])

print(len(data_train))
print(len(data_test))

data_train.info()

data_train.describe()

wind_speed_train = data_train['wind_speed'].values
wind_speed_test = data_test['wind_speed'].values
dates = data_train['date'].values


plt.figure(figsize=(15,5))
plt.plot(dates, wind_speed_train)
plt.title('Wind Speed', fontsize=20);

def create_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset)-look_back-1):
        a = dataset[i:(i+look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    return np.array(dataX), np.array(dataY)

train_set = wind_speed_train.reshape(len(wind_speed_train),1)
test_set = wind_speed_test.reshape(len(wind_speed_test),1)

trainX, trainY = create_dataset(train_set, 1)
testX, testY = create_dataset(test_set, 1)

trainX = np.reshape(trainX, (trainX.shape[0], trainX.shape[1],1))
testX = np.reshape(testX, (testX.shape[0], testX.shape[1],1))

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(100, return_sequences=True, input_shape = (trainX.shape[1], 1)),
  tf.keras.layers.LSTM(100),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(50, activation="relu"),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(loss=tf.keras.losses.huber,
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(trainX, trainY, epochs = 100, batch_size = 16)

max = data_train.iloc[data_train['wind_speed'].idxmax(), 3:4]
min = data_train.iloc[data_train['wind_speed'].idxmin(), 3:4]
skala_data = (max - min) * 0.1
print("skala data -> ", skala_data)

prediction = model.predict(testX)
prediction[:5]

plt.figure(figsize=(20,10))
plt.plot(test_set, color = 'black', label = 'Wind Speed')
plt.plot(prediction, color = 'red', label = 'Predicted Wind Speed')
plt.title('Wind Speed Prediction')
plt.xlabel('Time')
plt.ylabel('Wind Speed')
plt.legend()
plt.show()